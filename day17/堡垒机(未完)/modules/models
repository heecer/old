#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Author:Haccer
import sqlalchemy
from sqlalchemy import create_engine, Table
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String,ForeignKey,UniqueConstraint
from sqlalchemy_utils import ChoiceType
from sqlalchemy.orm import sessionmaker,relationship
# engine = create_engine(Conn_Params,encoding='utf-8', echo=False)     #创建db连接对象

Base = declarative_base()  # 生成orm基类

user_m2m_bindhost = Table('user_m2m_bindhost',Base.matedata,
                          Column('userprofile_id',Integer,ForeignKey('user_profile.id)')),
                          Column('bindhost_id',Integer,ForeignKey('bind_host.id'))
                          )

bindhost_m2m_hostgroup = Table('bindhost_m2m_hostgroup',Base.matedata,
                          Column('bindhost_id',Integer,ForeignKey('bind_host.id)')),
                          Column('hostgroup_id',Integer,ForeignKey('host_group.id'))
                          )

user_m2m_hostgroup = Table('user_m2m_hostgroup',Base.matedata,
                          Column('userprofile_id',Integer,ForeignKey('user_profile.id)')),
                          Column('hostgroup_id',Integer,ForeignKey('host_group.id'))
                          )

class BindHost(Base):
    '''主机，用户组，远程用户绑定表'''
    __tablename__ = 'bind_host'
    __table_args__ = (UniqueConstraint('host_id', 'remoteuser_id', name='_host_remoteuser_uc'),)

    id = Column(Integer,primary_key=True)
    host_id = Column(Integer,ForeignKey('host.id'))
    # group_id = Column(Integer, ForeignKey('host_group.id'))
    remoteuser_id = Column(Integer, ForeignKey('remote_user.id'))
    host = relationship('Host',backref='bind_hosts')
    # host_group = relationship('HostGroup',backref='bind_hosts')
    remote_user = relationship('RemoteUser', backref='bind_hosts')
    def __repr__(self):
        return '<%s -- %s>'%(self.host.ip,
                            self.remote_user.username)

class Host(Base):
    '''客户端主机表'''
    __tablename__ = 'host'
    id = Column(Integer,primary_key=True)
    hostname = Column(String(64),unique=True,nullable=False)
    ip = Column(String(64),unique=True)
    port = Column(Integer,default=22)


    def __repr__(self):
        '''显示信息'''
        return self.hostname

class HostGroup(Base):
    '''主机分组表'''
    __tablename__ = 'host_group'
    id = Column(Integer, primary_key=True)
    name = Column(String(32),nullable=False)
    bind_hosts = relationship('BindHost',secondary=bindhost_m2m_hostgroup,backref='host_groups')

    def __repr__(self):
        '''显示信息'''
        return self.name

class RemoteUser(Base):
    '''远程用户表'''
    __tablename__ = 'remote_user'
    __table_args__ = (UniqueConstraint('auth_type', 'username', 'password', name='_user_passwd_uc'),)

    AuthTypes = [
        ('ssh-passwd', 'SSH/Password'),
        ('ssh-key', 'SSH/KEY'),
    ]
    id = Column(Integer, primary_key=True)
    username = Column(String(32),nullable=False)
    password = Column(String(128),nullable=False)

    # auth_type = Column(Enum('K','P'))
    auth_type = Column(ChoiceType(AuthTypes))

    def __repr__(self):
        '''显示信息'''
        return self.username


class UserProfile(Base):
    '''堡垒机账户表'''
    __tablename__ = 'user_profile'
    id = Column(Integer, primary_key=True)
    username = Column(String(32),unique=True)
    password = Column

    host_groups = relationship('HostGroup',secondary=user_m2m_hostgroup,backref='user_profiles')
    bind_host = relationship('BindHost',secondary=user_m2m_bindhost,backref='user_profile')
    def __repr__(self):
        return self.username

# class AuditLog(Base):
#     '''日志表'''
#     __tablename__ = 'remote_user'
#     id = Column(Integer, primary_key=True)
#     pass
